{"ast":null,"code":"var _jsxFileName = \"/Users/sdpadmin/Desktop/repos/cicd/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { uploadFile, listObjects, downloadFile } from \"./services/S3Service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst S3Component = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [bucketObjects, setBucketObjects] = useState([]);\n  const [downloadedFile, setDownloadedFile] = useState(\"\");\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleUpload = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const result = await response.json();\n      console.lof(\"RESULT1\");\n      console.log(result);\n      let test = fetch(\"/api/sample\").then(response => response.json()).then(data => {\n        console.log(\"TEST0\");\n        console.log(data);\n      }).catch(error => console.error(\"Error:\", error));\n      console.log(\"TEST1\");\n      console.log(test);\n      if (file) {\n        console.log(\"TEST2\");\n        console.log(file);\n        // await uploadFile(file, 'bqcket100', 'images', file.name);\n        // Optionally, you can update the UI or perform other actions after uploading.\n      }\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    }\n  };\n  const handleListObjects = async () => {\n    try {\n      const response = await listObjects(\"YOUR_BUCKET_NAME\");\n      setBucketObjects(response.Contents || []);\n    } catch (error) {\n      console.error(\"Error listing objects:\", error);\n    }\n  };\n  const handleDownload = async key => {\n    try {\n      const response = await downloadFile(\"YOUR_BUCKET_NAME\", key);\n      // `response.Body` contains the downloaded file data\n      // Handle the downloaded file data as needed, e.g., display or save it\n      setDownloadedFile(response.Body.toString());\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleListObjects,\n      children: \"List Objects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), bucketObjects.map(object => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: object.Key\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDownload(object.Key),\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, object.Key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)), downloadedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Downloaded File: \", downloadedFile]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(S3Component, \"X21nMXojokRqFOV49CMaBQYdX1o=\");\n_c = S3Component;\nexport default S3Component;\nvar _c;\n$RefreshReg$(_c, \"S3Component\");","map":{"version":3,"names":["React","useState","uploadFile","listObjects","downloadFile","jsxDEV","_jsxDEV","S3Component","_s","file","setFile","bucketObjects","setBucketObjects","downloadedFile","setDownloadedFile","handleFileChange","event","target","files","handleUpload","response","fetch","ok","Error","result","json","console","lof","log","test","then","data","catch","error","handleListObjects","Contents","handleDownload","key","Body","toString","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","object","Key","_c","$RefreshReg$"],"sources":["/Users/sdpadmin/Desktop/repos/cicd/client/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { uploadFile, listObjects, downloadFile } from \"./services/S3Service\";\n\nconst S3Component = () => {\n  const [file, setFile] = useState(null);\n  const [bucketObjects, setBucketObjects] = useState([]);\n  const [downloadedFile, setDownloadedFile] = useState(\"\");\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const handleUpload = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/data');\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const result = await response.json();\n      console.lof(\"RESULT1\")\n      console.log(result)\n      let test = fetch(\"/api/sample\")\n        .then((response) => response.json())\n        .then((data) =>  {\n          console.log(\"TEST0\")\n          console.log(data)\n        })\n        .catch((error) => console.error(\"Error:\", error));\n        console.log(\"TEST1\")\n        console.log(test)\n      if (file) {\n        console.log(\"TEST2\")\n        console.log(file)\n        // await uploadFile(file, 'bqcket100', 'images', file.name);\n        // Optionally, you can update the UI or perform other actions after uploading.\n      }\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    }\n  };\n\n  const handleListObjects = async () => {\n    try {\n      const response = await listObjects(\"YOUR_BUCKET_NAME\");\n      setBucketObjects(response.Contents || []);\n    } catch (error) {\n      console.error(\"Error listing objects:\", error);\n    }\n  };\n\n  const handleDownload = async (key) => {\n    try {\n      const response = await downloadFile(\"YOUR_BUCKET_NAME\", key);\n      // `response.Body` contains the downloaded file data\n      // Handle the downloaded file data as needed, e.g., display or save it\n      setDownloadedFile(response.Body.toString());\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleUpload}>Upload</button>\n      <button onClick={handleListObjects}>List Objects</button>\n\n      {bucketObjects.map((object) => (\n        <div key={object.Key}>\n          <span>{object.Key}</span>\n          <button onClick={() => handleDownload(object.Key)}>Download</button>\n        </div>\n      ))}\n\n      {downloadedFile && <div>Downloaded File: {downloadedFile}</div>}\n    </div>\n  );\n};\n\nexport default S3Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}